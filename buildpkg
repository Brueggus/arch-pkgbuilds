#!/bin/bash -e

shopt -s extglob
export LC_ALL=C

PACKAGES=""
BUILD_MODES=""
BUILD_OPTIONS=""

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
BOLD=$(tput bold)
ALL_OFF=$(tput sgr0)
readonly ALL_OFF BOLD BLUE GREEN RED YELLOW

plain() {
	local mesg=$1; shift
	printf "${BOLD}    ${mesg}${ALL_OFF}\n" "$@" >&2
}

msg() {
	local mesg=$1; shift
	printf "${BOLD}${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

msg2() {
	local mesg=$1; shift
	printf "${BOLD}${BLUE}  ->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

warning() {
	local mesg=$1; shift
	printf "${BOLD}${YELLOW}==> WARNING:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

error() {
	local mesg=$1; shift
	printf "${BOLD}${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

stat_busy() {
	local mesg=$1; shift
	printf "${BOLD}${GREEN}==>${ALL_OFF}${BOLD} ${mesg}...${ALL_OFF}" >&2
}

stat_done() {
	printf "${BOLD}done${ALL_OFF}\n" >&2
}

run_namcap() {
	local file=$1; shift
	msg2 "Linting ${file}..."
	namcap "${file}" \
		|sed -r "s|(.+) (W: .+)|     ${BOLD}${BLUE}\\1 ${YELLOW}\\2 ${ALL_OFF}|g" \
		|sed -r "s|(.+) (E: .+)|     ${BOLD}${BLUE}\\1 ${RED}\\2 ${ALL_OFF}|g"
}

sign() {
	local file=$1; shift
	msg2 "Signing ${file}..."
	gpg --yes --detach-sign "${file}"
}

mksrcinfo() {
	stat_busy "Updating .SRCINFO"
	makepkg --printsrcinfo > .SRCINFO
	stat_done
}

# parse options
while [[ ${#} -gt 0 ]]; do
	key="${1}"
	case ${key} in
		--testing)
			TESTING_i686=1
			TESTING_x86_64=1
			BUILD_MODES="${BUILD_MODES} testing-i686-build testing-x86_64-build"
		;;
		--testing-i686)
			TESTING_i686=1
			BUILD_MODES="${BUILD_MODES} testing-i686-build"
		;;
		--testing-x86_64)
			TESTING_x86_64=1
			BUILD_MODES="${BUILD_MODES} testing-x86_64-build"
		;;
		--staging)
			STAGING_i686=1
			STAGING_x86_64=1
			BUILD_MODES="${BUILD_MODES} staging-i686-build staging-x86_64-build"
		;;
		--staging-i686)
			STAGING_i686=1
			BUILD_MODES="${BUILD_MODES} staging-i686-build"
		;;
		--staging-x86_64)
			STAGING_x86_64=1
			BUILD_MODES="${BUILD_MODES} staging-x86_64-build"
		;;
		--extra)
			EXTRA_i686=1
			EXTRA_x86_64=1
			BUILD_MODES="${BUILD_MODES} extra-i686-build extra-x86_64-build"
		;;
		--extra-i686)
			EXTRA_i686=1
			BUILD_MODES="${BUILD_MODES} extra-i686-build"
		;;
		--extra-x86_64)
			EXTRA_x86_64=1
			BUILD_MODES="${BUILD_MODES} extra-x86_64-build"
		;;
		--multilib-mixed)
			MULTILIB=1
			EXTRA_i686=1
			BUILD_MODES="${BUILD_MODES} multilib-build extra-i686-build"
		;;
		--multilib-mixed-staging)
			MULTILIB_STAGING=1
			STAGING_i686=1
			BUILD_MODES="${BUILD_MODES} multilib-staging-build staging-i686-build"
		;;
		--multilib-mixed-testing)
			MULTILIB_TESTING=1
			TESTING_i686=1
			BUILD_MODES="${BUILD_MODES} multilib-testing-build testing-i686-build"
		;;
		--multilib)
			MULTILIB=1
			BUILD_MODES="${BUILD_MODES} multilib-build"
		;;
		--multilib-staging)
			MULTILIB_STAGING=1
			BUILD_MODES="${BUILD_MODES} multilib-staging-build"
		;;
		--multilib-testing)
			MULTILIB_TESTING=1
			BUILD_MODES="${BUILD_MODES} multilib-testing-build"
		;;
		-s|--nosig|--skipsig)
			SKIP_SIG=1
		;;
		--nobuild|--skipbuild)
			SKIP_BUILD=1
		;;
		--nosrc|--skipsrc)
			SKIP_SRC=1
		;;
		--nodist|--skipdist)
			SKIP_DIST=1
		;;
		--nolist|--skiplist)
			SKIP_LIST=1
		;;
		--nocheck|--skipcheck)
			SKIP_CHECK=1
		;;
		--keepcheck)
			KEEP_CHECK_FILES=1
		;;
		-u|--updpkgsums)
			UPDATE_PKG_SUMS=1
		;;
		-c|--recreate|--clean)
			BUILD_OPTIONS="${BUILD_OPTIONS} -c"
		;;
		--bump)
			BUMP_PKGREL=1
		;;
		--rebuild)
			BUMP_PKGREL=1
			REBUILD=1
			STAGING_i686=1
			STAGING_x86_64=1
			BUILD_MODES="${BUILD_MODES} staging-i686-build staging-x86_64-build"
		;;
		--rebuild-community)
			BUMP_PKGREL=1
			REBUILD_COMMUNITY=1
			STAGING_i686=1
			STAGING_x86_64=1
			BUILD_MODES="${BUILD_MODES} staging-i686-build staging-x86_64-build"
		;;
		--rebuild-multilib)
			BUMP_PKGREL=1
			REBUILD_MULTILIB=1
			REBUILD_COMMUNITY=1
			MULTILIB_STAGING=1
			BUILD_MODES="${BUILD_MODES} multilib-staging-build"
		;;
		*)
			# TODO: accept non local package arguments when rebuilding
			if [ ! -f "${key}/PKGBUILD" ]; then
				error "unrecognized option '${key}'"
				exit 1
			fi
			PACKAGES="${PACKAGES} ${key}"
		;;
	esac
	shift
done

# default build mode settings
if [ -z "${BUILD_MODES}" ]; then
	EXTRA_i686=1
	EXTRA_x86_64=1
	BUILD_MODES="extra-i686-build extra-x86_64-build"
fi

# build packages
for PACKAGE in ${PACKAGES}; do
	msg "Building ${PACKAGE}..."
	pushd "${PACKAGE}" >/dev/null

	msg2 "Cleaning old files..."
	rm -f *.log

	# update pkgsums
	if [ -n "${UPDATE_PKG_SUMS}" ]; then
		msg2 "Updating package checksums..."
		updpkgsums
	fi

	# initial .SRCINFO update for package vars
	mksrcinfo
	archs=$(grep 'arch =' .SRCINFO|cut -d= -f2|cut -d' ' -f2|tr '\n' ' ')
	validpgpkeys=$(grep 'validpgpkeys =' .SRCINFO|cut -d= -f2|cut -d' ' -f2|tr '\n' ' ')
	pkgrel=$(grep 'pkgrel =' .SRCINFO|cut -d= -f2|cut -d' ' -f2|tr -d '\n')
    if [[ -n "${BUMP_PKGREL}" ]]; then
        let "pkgrel++"
        msg2 "Bumping pkgrel to ${pkgrel}"
        sed -r "s|(pkgrel=).+|\1${pkgrel}|g" -i PKGBUILD
    fi

	# import all needed gpg keys
	for validpgpkey in ${validpgpkeys}; do
		msg2 "Importing PGP key: ${validpgpkey}"
		gpg --recv-keys "${validpgpkey}" &>/dev/null
	done

	# build selected modes
    if [[ -z "${SKIP_BUILD}" ]]; then
        for BUILD_MODE in ${BUILD_MODES}; do
            # skip mode if not valid
            arch=$(echo ${BUILD_MODE}|sed -r 's|.+-(.+)-.+|\1|')
            if [[ ! "${BUILD_MODE}" == *"multilib"* && \
                    ! " ${archs[@]} " =~ ' any ' && \
                    ! " ${archs[@]} " =~ " $(echo ${BUILD_MODE}|sed -r 's|.+-(.+)-.+|\1|') " ]]; then
                continue
            fi
            msg "Building via ${BUILD_MODE} ${BUILD_OPTIONS}..."
            ${BUILD_MODE} ${BUILD_OPTIONS}
        done
    fi

	# post build .SRCINFO for updated pkgver
	mksrcinfo
	pkgbase=$(grep 'pkgbase =' .SRCINFO|cut -d= -f2|cut -d' ' -f2|tr -d '\n')
	pkgname=$(grep 'pkgname =' .SRCINFO|cut -d= -f2|cut -d' ' -f2|tr '\n' ' ')
	pkgver=$(grep 'pkgver =' .SRCINFO|cut -d= -f2|cut -d' ' -f2|tr -d '\n')
	pkgrel=$(grep 'pkgrel =' .SRCINFO|cut -d= -f2|cut -d' ' -f2|tr -d '\n')
	epoch=$(grep 'epoch =' .SRCINFO|cut -d= -f2|cut -d' ' -f2|tr -d '\n')
	if [[ -n "${epoch}" ]]; then
		epoch="${epoch}:"
	fi
	pkgverfull="${epoch}${pkgver}-${pkgrel}"

	# create source tarball
    if [[ -z "${SKIP_SRC}" ]]; then
        stat_busy "Creating source tarball"
        extra-x86_64-build -- -- -S -d -f &>/dev/null
        rm -f '*-namcap.log'
        stat_done
    fi

	# signing tarballs
	# TODO: if not sign all, check if i686 built
    tarballsrc="${pkgbase}-${pkgverfull}.src.tar.gz"
	if [ -z "${SKIP_SIG}" ]; then
		msg "Signing tarballs..."
        if [[ -f "${tarballsrc}" ]]; then
            sign "${tarballsrc}"
        fi
		for pkg in ${pkgname}; do
			for arch in ${archs}; do
				tarballpkg="${pkg}-${pkgverfull}-${arch}.pkg.tar.xz"
				sign "${tarballpkg}"
			done
		done
	else
		# remove signature files
		rm -f "${tarballsrc}.sig"
		for pkg in ${pkgname}; do
			for arch in ${archs}; do
				tarballpkg="${pkg}-${pkgverfull}-${arch}.pkg.tar.xz.sig"
				rm -f "${tarballpkg}"
			done
		done
	fi

    if [ -z "${SKIP_LIST}" ]; then
        msg "Listing package contents..."
        for pkg in ${pkgname}; do
            for arch in ${archs}; do
                tarballpkg="${pkg}-${pkgverfull}-${arch}.pkg.tar.xz"
                msg2 "Listing ${tarballpkg}..."
                for file in `tar --force-local -tf "${tarballpkg}"|sort`; do
                    printf "${BOLD}${BLUE}     %s${ALL_OFF}\n" "${file}" >&2
                done
            done
        done
    fi

    if [ -z "${SKIP_CHECK}" ]; then
        msg "Running namcap..."
        for pkg in ${pkgname}; do
            for arch in ${archs}; do
                tarballpkg="${pkg}-${pkgverfull}-${arch}.pkg.tar.xz"
                run_namcap "${tarballpkg}"
            done
        done
        run_namcap PKGBUILD
		msg "Running checkpkg..."
		checkpkg || true
		if [ -z "${KEEP_CHECK_FILES}" ]; then
			rm -rf /tmp/checkpkg-script.*
		fi
    fi

    # distribute into repo checkout
	if [[ -d "../.repo/packages/${pkgbase}/trunk" ]]; then
        repo='packages'
    else
        if [[ -d "../.repo/community/${pkgbase}/trunk" ]]; then
            repo='community'
        fi
	fi
    if [[ -z "${SKIP_DIST}" && -n "${repo}" ]]; then
        if [[ ! -f "${tarballsrc}" ]]; then
            warning "Skipping distribution: missing ${tarballsrc}"
        else
            destdir="../.repo/${repo}/${pkgbase}/trunk"
            msg "Distributing into ${repo}..."
            msg2 "Cleaning target..."
            rm -f "./${destdir}/"*
            msg2 "Extracting sources..."
            tar --force-local --strip-components=1 -xvf "${tarballsrc}" -C "./${destdir}" &>/dev/null
            rm "./${destdir}/.SRCINFO"
            msg2 "Creating symlinks..."
            for pkg in ${pkgname}; do
                for arch in ${archs}; do
                    tarballpkg="${pkg}-${pkgverfull}-${arch}.pkg.tar.xz"
                    ln -rs ${tarballpkg}{,.sig} "${destdir}"
                done
            done
        fi
    fi

	msg "Finished building ${PACKAGE} ${pkgverfull}"
	popd >/dev/null
done
